{"version":3,"sources":["services/api-service.js","components/Searchbar/Searchbar.jsx","components/ImageGallery/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/Spinner/Spinner.jsx","components/Modal/Modal.jsx","App.js","index.js"],"names":["axios","defaults","baseURL","fetchImages","query","page","get","then","response","data","hits","Searchbar","state","searchQuery","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","image","onImageClick","largeImageURL","tags","src","alt","onClick","ImageGallery","images","map","id","webformatURL","Button","Spinner","color","height","width","modalRoot","document","getElementById","Modal","handleOverlayClick","code","toggleModal","handleBackDropClick","currentTarget","window","addEventListener","removeEventListener","largeImg","createPortal","App","isLoading","modalIsOpen","onInputChange","console","log","finally","onButtonClick","scrollTo","top","documentElement","scrollHeight","behavior","prevProps","prevState","length","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ea485bca.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst apiKey = '20312002-359243adeeeebb2bc74e90a1f';\n\naxios.defaults.baseURL = 'https://pixabay.com';\n\nconst fetchImages = (query, page) => {\n  return axios\n    .get(\n      `/api/?q=${query}&page=${page}&image_type=photo&orientation=horizontal&per_page=12&key=${apiKey}`,\n    )\n    .then(response => response.data.hits);\n};\n\nexport default fetchImages;\n","import { Component } from 'react';\nimport './Searchbar.scss';\nimport PropTypes from 'prop-types';\n\nclass Searchbar extends Component {\n  state = { searchQuery: '' };\n\n  handleChange = e => {\n    this.setState({ searchQuery: e.target.value });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.searchQuery);\n    this.setState({ searchQuery: '' });\n  };\n\n  render() {\n    return (\n      <header className=\"Searchbar\" onSubmit={this.handleSubmit}>\n        <form className=\"SearchForm\">\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            value={this.state.searchQuery}\n            placeholder=\"Search images and photos\"\n            onChange={this.handleChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import PropTypes from 'prop-types';\n\nconst ImageGalleryItem = ({ image, onImageClick, largeImageURL, tags }) => {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={image}\n        alt={tags}\n        className=\"ImageGalleryItem-image\"\n        onClick={() => onImageClick(largeImageURL)}\n      />\n    </li>\n  );\n};\n\nImageGalleryItem.propTypes = {\n  image: PropTypes.string.isRequired,\n  onImageClick: PropTypes.func.isRequired,\n  largeImageURL: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import PropTypes from 'prop-types';\nimport ImageGalleryItem from './ImageGalleryItem';\nimport './ImageGallery.scss';\n\nconst ImageGallery = ({ images, onImageClick }) => {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => (\n        <ImageGalleryItem\n          key={id}\n          image={webformatURL}\n          tags={tags}\n          onImageClick={onImageClick}\n          largeImageURL={largeImageURL}\n        />\n      ))}\n    </ul>\n  );\n};\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      webformatURL: PropTypes.string.isRequired,\n      largeImageURL: PropTypes.string.isRequired,\n      tags: PropTypes.string.isRequired,\n    }),\n  ),\n  onImageClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","import PropTypes from 'prop-types';\nimport './Button.scss';\n\nconst Button = ({ onClick }) => {\n  return (\n    <div className=\"Button\">\n      <button type=\"button\" onClick={onClick}>\n        Load more\n      </button>\n    </div>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport './Spinner.scss';\n\nconst Spinner = () => {\n  return (\n    <Loader\n      className=\"Spinner\"\n      type=\"ThreeDots\"\n      color=\"#3f51b5\"\n      height={80}\n      width={80}\n    />\n  );\n};\n\nexport default Spinner;\n","import { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport './Modal.scss';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.getElementById('modalRoot');\n\nclass Modal extends Component {\n  state = {};\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleOverlayClick);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleOverlayClick);\n  }\n  handleOverlayClick = e => e.code === 'Escape' && this.props.toggleModal();\n  handleBackDropClick = e =>\n    e.target === e.currentTarget && this.props.toggleModal();\n\n  render() {\n    const { largeImg } = this.props;\n    return createPortal(\n      <div className=\"Overlay\" onClick={this.handleBackDropClick}>\n        <div className=\"Modal\">\n          <img src={largeImg} alt=\"\" />\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\n\nModal.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n  largeImg: PropTypes.string.isRequired,\n};\n\nexport default Modal;\n","import { Component } from 'react';\nimport fetchImages from './services/api-service';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport Spinner from './components/Spinner';\nimport Modal from './components/Modal';\n\nclass App extends Component {\n  state = {\n    images: [],\n    query: '',\n    page: 1,\n    isLoading: false,\n    modalIsOpen: false,\n    largeImg: '',\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.query !== this.state.query) {\n      this.fetchImages();\n    }\n  }\n\n  onInputChange = query => {\n    this.setState({ images: [], query, page: 1 });\n  };\n\n  fetchImages = () => {\n    const { query, page } = this.state;\n    this.setState({ isLoading: true });\n    return fetchImages(query, page)\n      .then(data => {\n        console.log(data);\n        this.setState(({ images, page }) => ({\n          images: [...images, ...data],\n          page: page + 1,\n        }));\n      })\n      .finally(() => this.setState({ isLoading: false }));\n  };\n  onImageClick = largeImg => {\n    this.setState({ largeImg });\n    this.toggleModal();\n  };\n\n  onButtonClick = () => {\n    this.fetchImages(this.state.query).then(() =>\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      }),\n    );\n  };\n\n  toggleModal = () => {\n    this.setState(({ modalIsOpen }) => ({ modalIsOpen: !modalIsOpen }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Searchbar onSubmit={this.onInputChange} />\n        <ImageGallery\n          images={this.state.images}\n          onImageClick={this.onImageClick}\n        />\n        {this.state.isLoading && <Spinner />}\n        {this.state.images.length > 0 && (\n          <Button onClick={this.onButtonClick} />\n        )}\n\n        {this.state.modalIsOpen && (\n          <Modal\n            toggleModal={this.toggleModal}\n            largeImg={this.state.largeImg}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}